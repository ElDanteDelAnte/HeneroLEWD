<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SP_chirilla_idle_south</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>obj_char</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>// can be changed
maxvel=5;// Maximum Velocity: pixel/step value while shift key is held down
minvel=4;// Minimum Velocity: pixel/step value w/o shift
dist=241;// value before enemy goes into follow mode
lust=0;//initial lust, npc must fill to 100 to ejaculate
reach=32;//radius in pixels of npc's reach
stam=100;//initial stamina
frequency=8;//frequency of speed change during sex



//please don't change
horizontal=0;
vertical=0;
curvel=minvel;
orientation="south";
act="idle";
race="chirilla";
target=obj_lainie;
struggle=false;
struggleCt=0;
counter=0;
//motile=true;
targetx=1;
status="wait";
targety=1;
detRad=dist-1;//Detection Radius: distance in pixels enemy will start pursuing lainie



</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="2">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Animation Handler
targetx=target.x; targety=target.y;
if(status=="wait" || status =="follow"){//direction-dependent states
    if(curvel==0){
        act="idle";    
    }else if( curvel==minvel){
        act="walk";
    }else if( curvel== maxvel){
        act="run";
    }
    switch(orientation){
        case "northeast":
            orientation="north";
            break;
        case "northwest":
            orientation="north";
            break;
        case "southeast":
            orientation="east";
            break;
        case "southwest":
            orientation="west";
    }
    sprite_index=asset_get_index("SP_"+race+"_"+act+"_"+orientation);

}else{//basic animation states (no direction or characters//
    sprite_index=asset_get_index("SP_"+race+"_"+act);

}
switch(status){
    case "sexual":
        if(lust&lt;68){
            act="sexloop1_lainie";
        }else if(lust&gt;=80){
            act="sexfinish1_lainie";
        }
    break;
    case "spectate":
        act="spectate";
        break;
}


// old way//


/*if(status=="follow" || status=="wait"){
switch(orientation ){
    case "south":
        if(vertical!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_down;
        }else if(vertical!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_down;
        }else if(vertical==0){
           sprite_index=SP_idle_chirilla_down; 
        }
        
        break;
        case "southeast":
        if(vertical!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_right;
        }else if(vertical!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_down_right;
        }else if(vertical==0){
            sprite_index=SP_idle_chirilla_right;
        }
        
        break;
    case "east":
        if(horizontal!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_right;
        }else if(horizontal!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_side_right;
        }else if(horizontal==0){
            sprite_index=SP_idle_chirilla_right;
        }
        
        break;
        case "northeast":
        if(vertical!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_right;
        }else if(vertical!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_up_right;
        }else if(vertical==0){
            sprite_index=SP_idle_chirilla_right;
        }
        
        break;
    case "north":
        if(vertical!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_up;
        }else if(vertical!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_up;
        }else if(vertical==0){
            sprite_index=SP_idle_chirilla_up;
        }
        
        break;
        case "northwest":
        if(vertical!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_left;
        }else if(vertical!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_up_left;
        }else if(vertical==0){
            sprite_index=SP_idle_chirilla_left;
        }
        
        break;
    case "west":
        if(horizontal!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_left;
        }else if(horizontal!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_side_left;
        }else if(horizontal==0){
            sprite_index=SP_idle_chirilla_left;
        }
        
        break;
        case "southwest":
        if(vertical!=0 &amp;&amp; curvel&gt;=minvel){
            sprite_index=SP_walk_chirilla_left;
        }else if(vertical!=0 &amp;&amp; curvel==maxvel){
            sprite_index=SP_run_down_left;
        }else if(vertical==0){
            sprite_index=SP_idle_chirilla_left;
        }
        
        break;
        

}//end of walking animation switch;
}//end of status "follow check*/ 

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behavior Handler/Definitions

switch(status){
        case "wait":
            curvel=0;
            if(dist&lt;detRad){
                status="follow";
            }
            break;
        case "follow":
            
            if(dist&lt;detRad+50){
                horizontal=dcos(theta);
                vertical=dsin(theta);
                curvel=minvel;
            }else{
                status="wait";
            }
            if(dist&lt;reach &amp;&amp; !global.engaged){
                status="sexual"
                
            }else if(dist&lt;reach+100 &amp;&amp; global.engaged){
                status="spectate";
                curvel=0;
                
                
            }
            
            break;
        case "sexual":
            global.vartest=lust;//test var//
            horizontal=0;vertical=0;
            if(counter%frequency==0){
                counter=0;
                if(lust&lt;50){
                    image_speed=choose(.75,1,1.25);
                }else if(lust&gt;=65){
                    image_speed=choose(1.15,1.25,1.35);    
                }
            
            }
            
                
               
            if(global.e &amp;&amp; !struggle){
                struggle=true;
                if(target.stam&gt;25){
                    target.stam-=25;
                    struggleCt+=1
                }
                
                
               /*stam-=10*/
            }else if(!global.e &amp;&amp; struggle){
                struggle=false;
            }
            //motile=false;
            global.engaged=true;
            target.act="none";
             lust+=.2;stam-=.1;
             counter+=1;
            
            if(lust&gt;=100||struggleCt&gt;=15){
            status="conquered";
            global.engaged=false;
            target.act="idle_";
            }
            break;
        case "spectate":
            if(global.engaged){
                curvel=0;
            }else{
                status="follow";
            }
            break;
        case "conquered":
            //motile=false;
            visible=false;
            effect_create_above(ef_smoke,x,y,random(image_yscale),c_gray);
            
            break;


}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
