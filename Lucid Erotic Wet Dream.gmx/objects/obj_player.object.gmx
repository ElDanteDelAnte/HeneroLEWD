<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SP_Idle2</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_char</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit from base
event_inherited();

//"protected" vars:
image_speed = .125; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///private variables

//stats
hp = 100;
stamDec = .5;
mood = 5;

//movement
minvel = 3;
stevel = minvel * .5;       //stealthing speed
maxvel = minvel * 1.75;
//curvel = 0;       //moved to base
findOrient = scr_orient_8;

//control
suspended = false;
instance_create(0, 0, obj_gui);
dbox("Welcome to LEWD!#WASD: Make Lainie Walk#Shift: Sprint#Tab: Toggle inventory.#E key: General action button# ... Enjoy your stay!");
targetX = mouse_x;
targetY = mouse_y;
stamBlock = false;  //find out what this does
type = "";          //very vague
time = 0;           //very vague
timer = time;
cap = 31;           //cap for something; maybe items?
quipacity = 15;     //is this really a time for puns?
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
// starting values, can be changed
//Dante: are these "public" variables?
//minvel = 3;
//stevel = minvel * .5;       //stealthing speed
//maxvel = minvel * 1.75;
//hp = 100;
//stam = 100;
//stamDec = .5;
//mood = 5;

//leave alone//
//Dante: Are these "private" variables?
//suspended = false;
//instance_create(0, 0, obj_gui);
//dbox("Welcome to LEWD!#WASD: Make Lainie Walk#Shift: Sprint#Tab: Toggle inventory.#E key: General action button# ... Enjoy your stay!");
//polar = false;

/*if(!polar)      //Dante: The is the Create event. This will always occur
{
    ori = 2;            //where do horizontal and vertical originate?
    horizontal = 0;
    vertical = 0;
}*/

//targetX = mouse_x;
//targetY = mouse_y;
//numDir = 8;                 //Dante: Meant to be constant
//curvel = 0;
//stamBlock = false;
//type = "";
//act = "Idle";
//curAct = act;               //Dante: Why are these two separate variables?
//variant = 0;                //couldn't think of a better name, determines what actions you'll be doing in special situations( i.e. tall grass, water, etc.);
curVariant = variant;       //Dante: Why are these two separate variables?
//image_speed = .125;
//quipacity = 15;

//Equipment Slots setup
for(i = quipacity; i &gt;= 0; i--)
{
    //0-name,1-description
    quipSlot[i, 0] = -1;
    quipSlot[i, 1] = "";
}

//Collectibles Array
//cap = 31;               //definitely rename
for(i = cap; i &gt;= 0; i--)
{
    //0-tag,1-quantity,2-value,description
    itemSlot[i, 0] = -1;
    itemslot[i, 1] = 0;
    itemslot[i, 2] = 0;
    itemslot[i, 3] = "";

}
//time = 0;
//timer = time;       //Dante: What is timer for?

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Implements Idle Action
imgSpeed_idle = 0.125;

//idle sprite
sprIdle[0] = SP_Idle0;         
sprIdle[1] = SP_Idle1;
sprIdle[2] = SP_Idle2;
sprIdle[3] = SP_Idle3;
sprIdle[4] = SP_Idle4;
sprIdle[5] = SP_Idle5;
sprIdle[6] = SP_Idle6;
sprIdle[7] = SP_Idle7;

//in grass
sprIdleGrass[0] = SP_Idle8;    
sprIdleGrass[1] = SP_Idle9;
sprIdleGrass[2] = SP_Idle10;
sprIdleGrass[3] = SP_Idle11;
sprIdleGrass[4] = SP_Idle12;
sprIdleGrass[5] = SP_Idle13;
sprIdleGrass[6] = SP_Idle14;
sprIdleGrass[7] = SP_Idle15;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Implements Walk Action
imgSpeed_walk = 0.5;
walkVel = minvel;

//walk sprite (temp)
sprWalk[0] = SP_Walk0;          
sprWalk[1] = SP_Walk1;
sprWalk[2] = SP_Walk2;
sprWalk[3] = SP_Walk3;
sprWalk[4] = SP_Walk4;
sprWalk[5] = SP_Walk5;
sprWalk[6] = SP_Walk6;
sprWalk[7] = SP_Walk7;

//in grass (temp)
sprWalkGrass[0] = SP_Walk8;        
sprWalkGrass[1] = SP_Walk9;
sprWalkGrass[2] = SP_Walk10;
sprWalkGrass[3] = SP_Walk11;
sprWalkGrass[4] = SP_Walk12;
sprWalkGrass[5] = SP_Walk13;
sprWalkGrass[6] = SP_Walk14;
sprWalkGrass[7] = SP_Walk15;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Implements Run Action
imgSpeed_run = 0.5;
runVel = maxvel;

//run sprite
sprRun[0] = SP_Run0;   
sprRun[1] = SP_Run1;
sprRun[2] = SP_Run2;
sprRun[3] = SP_Run3;
sprRun[4] = SP_Run4;
sprRun[5] = SP_Run5;
sprRun[6] = SP_Run6;
sprRun[7] = SP_Run7;

//in grass    
sprRunGrass[0] = SP_Run8;  
sprRunGrass[1] = SP_Run9;
sprRunGrass[2] = SP_Run10;
sprRunGrass[3] = SP_Run11;
sprRunGrass[4] = SP_Run12;
sprRunGrass[5] = SP_Run13;
sprRunGrass[6] = SP_Run14;
sprRunGrass[7] = SP_Run15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Obtain Direction Input

//mouse//

//keyboard//

if (global.d)
    horizontal = 1;
else if (global.a)
    horizontal = -1;
else
    horizontal = 0;

if (global.w)
    vertical = -1;
else if (global.s)
    vertical = 1;
else
    vertical = 0;

//gamepad?// (remember analog sticks)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Action

if (!suspended)
{
    if (horizontal == 0 &amp;&amp; vertical == 0)
        act = scr_action_idle;
    else if (global.shift &amp;&amp; !stamBlock)
        act = scr_action_run;
    else
        act = scr_action_walk;
}
else    //suspended
{
    //for timed suspension best used for simple, 1-piece animations.
    time += 1;
    if(act == "Escape")     //Dante: Make into own script
    {
        var lastImage = image_number;
        if(image_index &gt;= lastImage - 4)
        {
            image_speed = 0;
        }
    }
    
    if(time &gt;= timer)
    {
        //resume();
        suspended = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move In Direction
event_inherited();

if (!(horizontal == 0 &amp;&amp; vertical == 0))
    ori = script_execute(findOrient);

hspeed += (curvel * horizontal - hspeed) * .3;
vspeed += (curvel * vertical - vspeed) * .3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Behavior/Control

/*
//Dante: This is so sprites only change once
if(curAct != act)
{
    scr_behavior(act);      //Dante: This really didn't need to be a separate script
    curAct = act;
}*/

//Controls//
if(!suspended)
{
    //attack//
    if(mouse_check_button_released(mb_left) &amp;&amp; stam &gt; 10)
    {
        instance_create(x,y,obj_projectile);
        stam -= 10;
    }
    //use suspend(timer) to disable controls temporarily
    //use restore() to disable suspension;
    
    //vertical and horizontal are used here, but where do they originate?
    
    //direction
    /*if(!polar)          //Dante: But the player isn't polar! Can this be an override?
    {
        //vertical
        if(global.w)
        {
            vertical = -1;
        }
        else if(global.s)
        {
            vertical = 1;
        }
        else
        {
            vertical = 0;
        }
        
        //horizontal
        if(global.a)
        {
            horizontal = -1;
        }
        else if(global.d)
        {
            horizontal = 1;
        }
        else
        {
            horizontal = 0;
        }
        
        //Dante: can we eliminate this block somehow?
        //moving at all
        if(global.w || global.a || global.s || global.d)
        {
            if(global.shift &amp;&amp; !stamBlock)
            {
                act = "Run";
                stam -= stamDec;
            }
            else
            {
                act = "Walk";
            }
                
        }
        else
        {
            act = "Idle";
        }
        
    }
    else    //if polar
    {
        if(global.lmb)
        {
            if(global.shift &amp;&amp; !stamBlock)
            {
                act = "Run";
                stam -= stamDec;
            }
            else
            {
                act = "Walk";
            }
        }
        else
        {
            act = "Idle";
        }
        
        targetX = mouse_x;
        targetY = mouse_y;
    }*/
    
    mood = floor(hp / 33.33);
    if(hp &lt;= 0)
    {
        hp = 0;
    }


}
else  //if suspended
{
    //for timed suspension best used for simple, 1-piece animations.
    time += 1;
    if(act == "Escape")
    {
        //Dante: Is this a local variable?
        lastImage = image_number;
        if(image_index &gt;= lastImage - 4)
        {
            image_speed = 0;
        }
    }
    
    if(time &gt;= timer)
    {
        resume();
    }
}


//Stamgmt
if((stam &lt; 100) &amp;&amp; (curvel &lt; maxvel))
{
    stam += stamDec;
}
if(stam &lt; 0)
{
    stamBlock = true;
}
if(stamBlock &amp;&amp; stam &gt; 25)      //Dante: probably doesn't need to check stamBlock
{
    stamBlock = false;
}

//Dante: relocate this to the transfer point events    
if(collision_point(x, y, obj_transfer, false, false))
{
    inst = instance_nearest(x, y, obj_transfer);
    scr_spawnPlayer(inst.destX, inst.destY, inst.destRoom);
}




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
