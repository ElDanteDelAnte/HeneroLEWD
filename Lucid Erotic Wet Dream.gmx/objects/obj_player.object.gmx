<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>SP_Idle2</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>obj_base_char</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit from base
event_inherited();
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///"protected" vars:
image_speed = .125; 
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///private variables

//stats
hp = 100;
stamDec = .5;
mood = 5;

//movement
minvel = 3;
stevel = minvel * .5;       //stealthing speed
maxvel = minvel * 1.75;
//curvel = 0;       //moved to base
findOrient = scr_orient_8;

//control
suspend = 0;
instance_create(0, 0, obj_gui);
dbox("Welcome to LEWD!#WASD: Make Lainie Walk#Shift: Sprint#Tab: Toggle inventory.#E key: General action button# ... Enjoy your stay!");
targetX = mouse_x;
targetY = mouse_y;
stamBlock = false;  //find out what this does
type = "";          //very vague
cap = 31;           //cap for something; maybe items?
quipacity = 15;     //is this really a time for puns?
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init
// starting values, can be changed
//Dante: are these "public" variables?
//minvel = 3;
//stevel = minvel * .5;       //stealthing speed
//maxvel = minvel * 1.75;
//hp = 100;
//stam = 100;
//stamDec = .5;
//mood = 5;

//leave alone//
//Dante: Are these "private" variables?
//suspended = false;
//instance_create(0, 0, obj_gui);
//dbox("Welcome to LEWD!#WASD: Make Lainie Walk#Shift: Sprint#Tab: Toggle inventory.#E key: General action button# ... Enjoy your stay!");
//polar = false;

/*if(!polar)      //Dante: The is the Create event. This will always occur
{
    ori = 2;            //where do horizontal and vertical originate?
    horizontal = 0;
    vertical = 0;
}*/

//targetX = mouse_x;
//targetY = mouse_y;
//numDir = 8;                 //Dante: Meant to be constant
//curvel = 0;
//stamBlock = false;
//type = "";
//act = "Idle";
//curAct = act;               //Dante: Why are these two separate variables?
//variant = 0;                //couldn't think of a better name, determines what actions you'll be doing in special situations( i.e. tall grass, water, etc.);
//curVariant = variant;       //Dante: Why are these two separate variables?
//image_speed = .125;
//quipacity = 15;

//Equipment Slots setup
for(i = quipacity; i &gt;= 0; i--)
{
    //0-name,1-description
    quipSlot[i, 0] = -1;
    quipSlot[i, 1] = "";
}

//Collectibles Array
//cap = 31;               //definitely rename
for(i = cap; i &gt;= 0; i--)
{
    //0-tag,1-quantity,2-value,description
    itemSlot[i, 0] = -1;
    itemslot[i, 1] = 0;
    itemslot[i, 2] = 0;
    itemslot[i, 3] = "";

}
//time = 0;
//timer = time;       //Dante: What is timer for?

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Implements Idle Action
imgSpeed_idle = 0.125;

//idle sprite
sprIdle[Terrain.OPEN, dir8.RC] = SP_Idle0;         
sprIdle[Terrain.OPEN, dir8.RD] = SP_Idle1;
sprIdle[Terrain.OPEN, dir8.CD] = SP_Idle2;
sprIdle[Terrain.OPEN, dir8.LD] = SP_Idle3;
sprIdle[Terrain.OPEN, dir8.LC] = SP_Idle4;
sprIdle[Terrain.OPEN, dir8.LU] = SP_Idle5;
sprIdle[Terrain.OPEN, dir8.CU] = SP_Idle6;
sprIdle[Terrain.OPEN, dir8.RU] = SP_Idle7;

//in grass
sprIdle[Terrain.GRASS, dir8.RC] = SP_Idle8;    
sprIdle[Terrain.GRASS, dir8.RD] = SP_Idle9;
sprIdle[Terrain.GRASS, dir8.CD] = SP_Idle10;
sprIdle[Terrain.GRASS, dir8.LD] = SP_Idle11;
sprIdle[Terrain.GRASS, dir8.LC] = SP_Idle12;
sprIdle[Terrain.GRASS, dir8.LU] = SP_Idle13;
sprIdle[Terrain.GRASS, dir8.CU] = SP_Idle14;
sprIdle[Terrain.GRASS, dir8.RU] = SP_Idle15;

//in water (temp)
sprIdle[Terrain.WATER, dir8.RC] = SP_Idle8;    
sprIdle[Terrain.WATER, dir8.RD] = SP_Idle9;
sprIdle[Terrain.WATER, dir8.CD] = SP_Idle10;
sprIdle[Terrain.WATER, dir8.LD] = SP_Idle11;
sprIdle[Terrain.WATER, dir8.LC] = SP_Idle12;
sprIdle[Terrain.WATER, dir8.LU] = SP_Idle13;
sprIdle[Terrain.WATER, dir8.CU] = SP_Idle14;
sprIdle[Terrain.WATER, dir8.RU] = SP_Idle15;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Implements Walk Action
imgSpeed_walk = 0.5;
walkVel = minvel;

//open area walk sprite
sprWalk[Terrain.OPEN, dir8.RC] = SP_Walk0;          
sprWalk[Terrain.OPEN, dir8.RD] = SP_Walk1;
sprWalk[Terrain.OPEN, dir8.CD] = SP_Walk2;
sprWalk[Terrain.OPEN, dir8.LD] = SP_Walk3;
sprWalk[Terrain.OPEN, dir8.LC] = SP_Walk4;
sprWalk[Terrain.OPEN, dir8.LU] = SP_Walk5;
sprWalk[Terrain.OPEN, dir8.CU] = SP_Walk6;
sprWalk[Terrain.OPEN, dir8.RU] = SP_Walk7;

//in grass
sprWalk[Terrain.GRASS, dir8.RC] = SP_Walk8;        
sprWalk[Terrain.GRASS, dir8.RD] = SP_Walk9;
sprWalk[Terrain.GRASS, dir8.CD] = SP_Walk10;
sprWalk[Terrain.GRASS, dir8.LD] = SP_Walk11;
sprWalk[Terrain.GRASS, dir8.LC] = SP_Walk12;
sprWalk[Terrain.GRASS, dir8.LU] = SP_Walk13;
sprWalk[Terrain.GRASS, dir8.CU] = SP_Walk14;
sprWalk[Terrain.GRASS, dir8.RU] = SP_Walk15;

//in water (temp)
sprWalk[Terrain.WATER, dir8.RC] = SP_Walk8;        
sprWalk[Terrain.WATER, dir8.RD] = SP_Walk9;
sprWalk[Terrain.WATER, dir8.CD] = SP_Walk10;
sprWalk[Terrain.WATER, dir8.LD] = SP_Walk11;
sprWalk[Terrain.WATER, dir8.LC] = SP_Walk12;
sprWalk[Terrain.WATER, dir8.LU] = SP_Walk13;
sprWalk[Terrain.WATER, dir8.CU] = SP_Walk14;
sprWalk[Terrain.WATER, dir8.RU] = SP_Walk15;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Implements Run Action
imgSpeed_run = 0.5;
runVel = maxvel;

//run sprite
sprRun[Terrain.OPEN, dir8.RC] = SP_Run0;   
sprRun[Terrain.OPEN, dir8.RD] = SP_Run1;
sprRun[Terrain.OPEN, dir8.CD] = SP_Run2;
sprRun[Terrain.OPEN, dir8.LD] = SP_Run3;
sprRun[Terrain.OPEN, dir8.LC] = SP_Run4;
sprRun[Terrain.OPEN, dir8.LU] = SP_Run5;
sprRun[Terrain.OPEN, dir8.CU] = SP_Run6;
sprRun[Terrain.OPEN, dir8.RU] = SP_Run7;

//in grass    
sprRun[Terrain.GRASS, dir8.RC] = SP_Run8;  
sprRun[Terrain.GRASS, dir8.RD] = SP_Run9;
sprRun[Terrain.GRASS, dir8.CD] = SP_Run10;
sprRun[Terrain.GRASS, dir8.LD] = SP_Run11;
sprRun[Terrain.GRASS, dir8.LC] = SP_Run12;
sprRun[Terrain.GRASS, dir8.LU] = SP_Run13;
sprRun[Terrain.GRASS, dir8.CU] = SP_Run14;
sprRun[Terrain.GRASS, dir8.RU] = SP_Run15;

//in water (temp)
sprRun[Terrain.WATER, dir8.RC] = SP_Run8;  
sprRun[Terrain.WATER, dir8.RD] = SP_Run9;
sprRun[Terrain.WATER, dir8.CD] = SP_Run10;
sprRun[Terrain.WATER, dir8.LD] = SP_Run11;
sprRun[Terrain.WATER, dir8.LC] = SP_Run12;
sprRun[Terrain.WATER, dir8.LU] = SP_Run13;
sprRun[Terrain.WATER, dir8.CU] = SP_Run14;
sprRun[Terrain.WATER, dir8.RU] = SP_Run15;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Obtain Direction Input

//mouse//

//keyboard//

if (global.d)
    horizontal = 1;
else if (global.a)
    horizontal = -1;
else
    horizontal = 0;

if (global.w)
    vertical = -1;
else if (global.s)
    vertical = 1;
else
    vertical = 0;

//gamepad?// (remember analog sticks)
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Determine Action

if (!global.struggle)
{
    if (horizontal == 0 &amp;&amp; vertical == 0)
        act = scr_action_idle;
    else if (global.shift &amp;&amp; !stamBlock)
        act = scr_action_run;
    else
        act = scr_action_walk;
}
/*else    //suspended or struggling
{
    //for timed suspension best used for simple, 1-piece animations.
    time += 1;
    if(act == "Escape")     //Dante: Make into own script
    {
        var lastImage = image_number;
        if(image_index &gt;= lastImage - 4)
        {
            image_speed = 0;
        }
    }
    
    if(time &gt;= timer)
    {
        //resume();
        suspended = false;
    }
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Move In Direction

//if (!(horizontal == 0 &amp;&amp; vertical == 0))
//    ori = script_execute(findOrient);

hspeed += (curvel * horizontal - hspeed) * .3;
vspeed += (curvel * vertical - vspeed) * .3;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Makeshift Collision (and spawn?)
//Dante: relocate this to the transfer point events    
if(collision_point(x, y, obj_transfer, false, false))
{
    inst = instance_nearest(x, y, obj_transfer);
    scr_spawnPlayer(inst.destX, inst.destY, inst.destRoom);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///When Not Suspended
if(suspend &lt;= 0 &amp;&amp; !global.struggle)
{
    //attack//
    if(mouse_check_button_released(mb_left) &amp;&amp; stam &gt; 10)
    {
        instance_create(x,y,obj_projectile);
        stam -= 10;
    }
    
    mood = floor(hp / 33.33);           //remove this eventually
    //"death"
    if(hp &lt;= 0)
    {
        hp = 0;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Stamina Regen
if((stam &lt; 100) &amp;&amp; (curvel &lt; maxvel) &amp;&amp; !global.struggle)
    stam += stamDec;
if(stam &lt; 0)
    stamBlock = true;
if(stam &gt; 25)
    stamBlock = false;

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Inherit Step from Character
event_inherited();

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Suspend Timer
if (--suspend &lt; 0)
    suspend = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_base_enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///hide self
visible = false;
global.struggle = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
