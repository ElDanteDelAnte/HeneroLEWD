<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_char</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Motor/Direction/Animation/collision
//Motor:
//targetX=argument[0]; targetY=argument[1];velocity=argument[2];

drawRad=500
depth=-y;
deltaX=targetX-x;deltaY=targetY-y;//targetX/Y must be set in child objects
dist=sqrt(power(deltaX,2)+power(deltaY,2));
theta=darctan(deltaY/deltaX);
        
if(deltaX&lt;0){
    theta+=180
    }
if(deltaY&lt;0&amp;&amp;deltaX&gt;0){
    theta+=360
    }


//Motor/Direction
if(visible){
    if(polar){//all npc's have this. keyboard controls use rect//
        
        ori=floor(theta/(360/numDir));//important variable if npc turns into 8-direction;
        hspeed+=(curvel*dcos(theta)-hspeed)*.3;
        vspeed+=(curvel*dsin(theta)-vspeed)*.3;
    }
    else{
        hspeed+=(curvel*horizontal-hspeed)*.3;
        vspeed+=(curvel*vertical-vspeed)*.3;
        if(vertical==1 &amp;&amp; horizontal==1){
            ori=1;
        }else if(vertical==-1 &amp;&amp; horizontal==1){
            ori=7;
        }else if(vertical==1 &amp;&amp; horizontal==-1){
            ori=3;
        }else if(vertical==-1 &amp;&amp; horizontal==-1){
            ori=5;
        }else if(horizontal==1){
            ori=0;
        }else if(horizontal==-1){
            ori=4;
        }else if(vertical==1){
            ori=2;
        }else if(vertical==-1){
            ori=6;
        }
    }
}//end visible check;
else{
    hspeed=0;vspeed=0;
}



spExists=asset_get_index("SP_"+type+act+string(ori+variant*numDir));
if(spExists&gt;-1){
    sprite_index=spExists;
}else{
    sprite_index=asset_get_index("SP_"+type+act);
}
//Collision
if(!place_free(x,y+16)){
    while(!place_free(x,y+16)){
        y-=.1;
    }
}if(!place_free(x,y+8)){
    while(!place_free(x,y+8)){
        y+=.1;
    }
}if(!place_free(x-10,y+12)){
    while(!place_free(x-10,y+12)){
        x+=.1;
    }
}if(!place_free(x+10,y+12)){
    while(!place_free(x+10,y+12)){
        x-=.1;
    }
}


</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
