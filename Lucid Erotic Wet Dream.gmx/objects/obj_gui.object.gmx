<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
tabTgl=1;
diaTgl=-1;
global.tgTgl="";
global.w=false;
global.a=false;
global.s=false;
global.d=false;
global.e=false;
global.playerX=obj_player.x; global.playerY=obj_player.y;
global.struggle=false;
global.respawnX=1000; global.respawnY=1700;
text="";


//initial values
player=obj_player;
statOffset=380;curStatuo=statOffset;
menuOffset=640;curMenuo=menuOffset;
dboxOffset=640;curDboxo=dboxOffset;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Globals
//Inputs
global.rmb=mouse_check_button(mb_right);
global.lmb=mouse_check_button(mb_left);
global.shift=keyboard_check(vk_shift);
global.w=keyboard_check(ord('W'));
global.a=keyboard_check(ord('A'));
global.s=keyboard_check(ord('S'));
global.d=keyboard_check(ord('D'));
global.e=keyboard_check(ord('E'));


//trackers
global.playerX=player.x;global.playerY=player.y;


</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Buttons
//quicksave/savequit rects
mx=window_view_mouse_get_x(0);my=window_view_mouse_get_y(0);

if(mouse_check_button_released(mb_left)){
    //checks collision of mouse with various gui buttons upon clicking//
    clickCheck(mx,my);
}

if(keyboard_check_released(vk_tab)){
    tabTgl*=-1;
}
if(keyboard_check_released(ord('V'))){
    diaTgl*=-1;
}


//Equips

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Es Lerple
//values to lerp: menuOffset, dboxOffset, statbarOffset
//future graphics to lerp: map, collectibles,


//Tab Toggle//
if(tabTgl&gt;0){
    curMenuo=480;
    curStato=380;
}
else if(tabTgl&lt;0){
    curMenuo=0;
    curStato=480;
    diaTgl=-1;
    //curDboxo=curStato;
}
//Dialoggle
if(diaTgl&gt;0){
    curDboxo=curStato-125;
    if(keyboard_check_released(ord('E'))){
        diaTgl=-1;
    }
}else if(diaTgl&lt;0){
    curDboxo=curStato+50;
}
//Menu
if(curMenuo!=menuOffset){
    menuOffset=lerp(menuOffset,curMenuo,.15);
    //text="lerping";
}
//Statbar
if(curStato!=statOffset){
    statOffset=lerp(statOffset,curStato,.15);
    //text="lerping";
}

//dbox
if(curDboxo!=dboxOffset){
    dboxOffset=lerp(dboxOffset,curDboxo,.3);
    //text="lerping";
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///GUI'D RAW!!!
var guiPink = make_colour_rgb(227, 128, 155);
var guiBlue = make_colour_rgb(94, 138, 198);
var barx = 130;
var barlength = 155;
var bary1 = statOffset + 30;
var bary2 = statOffset + 60;

//Menu draw//

draw_background(menu_gui, 0, menuOffset);

/*for(i=0;i&lt;8;i++)
{
    if(i&lt;4)
    {
        slotx = quipx + (tilewidth * i);
        sloty = quipy;
    }
    else
    {
        slotx = quipx + (tilewidth * (i - 4));
        sloty = quipy + tilewidth;
    }
    
        draw_sprite(SP_skill_slot, 0, slotx + spacer, sloty + spacer);
    if(player.quipSlot[i, 0] &gt;= -1)
    {
        draw_sprite(SP_skill, i, slotx + s pacer, sloty + spacer);
    }
    
}*/

//Dbox draw//

draw_set_color(guiPink);
draw_background(dBox_gui, 0, dboxOffset);
draw_text(10, dboxOffset + 10, "V-Key: Hide/Show");
draw_text(20, dboxOffset + 40, dTxt);

//statbar draw//

draw_set_color(c_white);
draw_rectangle(barx,bary1, room_width, room_height, false);
draw_set_color(guiPink);
draw_rectangle(barx, bary1, barx+barlength * (player.hp * .01), bary1 + 28, false);
draw_set_color(guiBlue);
draw_rectangle(barx, bary2, barx + barlength * (player.stam * .01), bary2 + 28, false);
draw_background(frontPlate, 0, statOffset);

//Lainie draw//

draw_sprite(SP_mood, player.mood, 10, statOffset + 10);

//Debug draw//

/*draw_set_color(c_black);
draw_text(20, 20, "debug v1.69");
draw_text(20, 40, text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if(global.struggle){
    draw_sprite(SP_stopRape,0,player.x,player.y-64);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
